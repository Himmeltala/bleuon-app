{"version":3,"file":"form-validators-87561f4c.js","sources":["../../../common/utils/form-validators.ts"],"sourcesContent":["/**\r\n * @description 校验器工具\r\n * @author zheng\r\n * @since 2023/10/1\r\n * @link https://github.com/himmelbleu/bleuon-app\r\n */\r\n\r\nimport type { FormInstance } from \"element-plus\";\r\n\r\n/**\r\n * 提交表单之前校验整个表单是否合法\r\n *\r\n * @param formEl 表单 Ref 对象\r\n * @param success 成功回调\r\n * @param error 失败回调\r\n */\r\nexport async function validate(\r\n  formEl: FormInstance | undefined,\r\n  success?: Function,\r\n  error?: Function\r\n) {\r\n  if (!formEl) return;\r\n  await formEl.validate((valid, fields) => {\r\n    if (valid) {\r\n      success && success(valid, fields);\r\n    } else {\r\n      error && error(valid, fields);\r\n      return false;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 邮箱验证器\r\n *\r\n * @param isCorrect 邮箱地址是否正确的标识变量\r\n */\r\nexport function emailValidator(isCorrect: Ref<boolean>) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n    if (!regex.test(value)) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入正确的邮箱格式\"));\r\n    } else if (value === \"\") {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入邮箱地址\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 验证码验证器\r\n *\r\n * @param isCorrect 验证码是否正确的标志变量\r\n */\r\nexport function verifyCodeValidator(isCorrect: Ref<boolean>) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    if (value.length < 6) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入 6 位数的验证码\"));\r\n    } else if (value === \"\") {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入验证码\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 获取验证码\r\n *\r\n * @param interval 定时器 ID\r\n * @param count 倒计时变量，一般是 60s\r\n * @param disabled 控制发送验证码按钮是否显示的布尔变量\r\n */\r\nexport function getVerifyCode(\r\n  interval: number,\r\n  count: Ref<number>,\r\n  disabled: Ref<boolean>,\r\n  startInterval: (callback: Function) => void\r\n) {\r\n  startInterval(() => {\r\n    interval = setInterval(() => {\r\n      count.value--;\r\n      if (count.value < 0) {\r\n        clearInterval(interval);\r\n        disabled.value = false;\r\n        count.value = 60;\r\n      }\r\n    }, 1000);\r\n  });\r\n\r\n  disabled.value = true;\r\n}\r\n\r\n/**\r\n * 用户名验证器\r\n *\r\n * @param isCorrect 用户名是否正确的标识变量\r\n */\r\nexport function usernameValidator(isCorrect: Ref<boolean>) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    const regex = /^(?![_-])[\\u4e00-\\u9fa5a-zA-Z][\\u4e00-\\u9fa5a-zA-Z0-9_-]{4,16}$/;\r\n\r\n    if (!regex.test(value)) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"字母、中文、-、_，不能以数字开头、-、_开头，长度在4~16\"));\r\n    } else if (value === \"\") {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入用户名\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 密码验证器\r\n *\r\n * @param isCorrect 密码是否正确的标识变量\r\n */\r\nexport function passwordValidator(isCorrect: Ref<boolean>) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    const regex = /^[a-zA-Z0-9.]{8,16}$/;\r\n\r\n    if (!regex.test(value)) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"英文、.、数字，长度在8~16\"));\r\n    } else if (value === \"\") {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入密码\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 二次密码验证器\r\n *\r\n * @param isCorrect 密码是否正确的标识变量\r\n */\r\nexport function rePasswdValidator(\r\n  isCorrect: Ref<boolean>,\r\n  formData: {\r\n    password: string;\r\n    rePasswd: string;\r\n  }\r\n) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    const regex = /^[a-zA-Z0-9.]{8,16}$/;\r\n\r\n    if (!regex.test(value)) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"英文、.、数字，长度在8~16\"));\r\n    } else if (value === \"\") {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"请输入密码\"));\r\n    } else if (formData.rePasswd !== formData.password) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"两次密码输入不一致\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 手机号、电子邮箱、用户名格式校验器\r\n *\r\n * @param isCorrect 是否正确的标志变量\r\n */\r\nexport function accountValidator(isCorrect: Ref<boolean>) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    const regex =\r\n      /^(?:[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}|(?![_-])[\\u4e00-\\u9fa5a-zA-Z][\\u4e00-\\u9fa5a-zA-Z0-9_-]{4,16}|(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8})$/;\r\n    if (!regex.test(value)) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"错误的手机号、邮箱、用户名的格式！\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 文件名称格式校验器\r\n *\r\n * @param isCorrect 是否正确的标志变量\r\n */\r\nexport function fileNameValidator(isCorrect: Ref<boolean>) {\r\n  return (rule: any, value: any, callback: any) => {\r\n    const regex =\r\n      /^(?:[\\u4e00-\\u9fa5a-zA-Z][\\u4e00-\\u9fa5a-zA-Z\\d\\s\\S]{1,28}|[\\u4e00-\\u9fa5a-zA-Z])$/;\r\n    if (!regex.test(value)) {\r\n      isCorrect.value = false;\r\n      callback(new Error(\"错误的文件名称！\"));\r\n    } else {\r\n      isCorrect.value = true;\r\n      callback();\r\n    }\r\n  };\r\n}\r\n"],"names":["validate","formEl","success","error","valid","fields","emailValidator","isCorrect","rule","value","callback","verifyCodeValidator","getVerifyCode","interval","count","disabled","startInterval","usernameValidator","passwordValidator","rePasswdValidator","formData","accountValidator","fileNameValidator"],"mappings":"AAgBsB,eAAAA,EACpBC,EACAC,EACAC,EACA,CACKF,GACL,MAAMA,EAAO,SAAS,CAACG,EAAOC,IAAW,CACvC,GAAID,EACSF,GAAAA,EAAQE,EAAOC,CAAM,MAEvB,QAAAF,GAAAA,EAAMC,EAAOC,CAAM,EACrB,EACT,CACD,CACH,CAOO,SAASC,EAAeC,EAAyB,CAC/C,MAAA,CAACC,EAAWC,EAAYC,IAAkB,CACjC,kDACH,KAAKD,CAAK,EAGVA,IAAU,IACnBF,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,SAAS,CAAC,IAE7BH,EAAU,MAAQ,GACTG,MAPTH,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,YAAY,CAAC,EAOlC,CAEJ,CAOO,SAASC,EAAoBJ,EAAyB,CACpD,MAAA,CAACC,EAAWC,EAAYC,IAAkB,CAC3CD,EAAM,OAAS,GACjBF,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,cAAc,CAAC,GACzBD,IAAU,IACnBF,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,QAAQ,CAAC,IAE5BH,EAAU,MAAQ,GACTG,IACX,CAEJ,CASO,SAASE,EACdC,EACAC,EACAC,EACAC,EACA,CACAA,EAAc,IAAM,CAClBH,EAAW,YAAY,IAAM,CACrBC,EAAA,QACFA,EAAM,MAAQ,IAChB,cAAcD,CAAQ,EACtBE,EAAS,MAAQ,GACjBD,EAAM,MAAQ,KAEf,GAAI,CAAA,CACR,EAEDC,EAAS,MAAQ,EACnB,CAOO,SAASE,EAAkBV,EAAyB,CAClD,MAAA,CAACC,EAAWC,EAAYC,IAAkB,CACjC,kEAEH,KAAKD,CAAK,EAGVA,IAAU,IACnBF,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,QAAQ,CAAC,IAE5BH,EAAU,MAAQ,GACTG,MAPTH,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,iCAAiC,CAAC,EAOvD,CAEJ,CAOO,SAASQ,EAAkBX,EAAyB,CAClD,MAAA,CAACC,EAAWC,EAAYC,IAAkB,CACjC,uBAEH,KAAKD,CAAK,EAGVA,IAAU,IACnBF,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,OAAO,CAAC,IAE3BH,EAAU,MAAQ,GACTG,MAPTH,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,iBAAiB,CAAC,EAOvC,CAEJ,CAOgB,SAAAS,EACdZ,EACAa,EAIA,CACO,MAAA,CAACZ,EAAWC,EAAYC,IAAkB,CACjC,uBAEH,KAAKD,CAAK,EAGVA,IAAU,IACnBF,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,OAAO,CAAC,GAClBU,EAAS,WAAaA,EAAS,UACxCb,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,WAAW,CAAC,IAE/BH,EAAU,MAAQ,GACTG,MAVTH,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,iBAAiB,CAAC,EAUvC,CAEJ,CAOO,SAASW,EAAiBd,EAAyB,CACjD,MAAA,CAACC,EAAWC,EAAYC,IAAkB,CAE7C,+LACS,KAAKD,CAAK,GAInBF,EAAU,MAAQ,GACTG,MAJTH,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,mBAAmB,CAAC,EAIzC,CAEJ,CAOO,SAASY,EAAkBf,EAAyB,CAClD,MAAA,CAACC,EAAWC,EAAYC,IAAkB,CAE7C,qFACS,KAAKD,CAAK,GAInBF,EAAU,MAAQ,GACTG,MAJTH,EAAU,MAAQ,GACTG,EAAA,IAAI,MAAM,UAAU,CAAC,EAIhC,CAEJ"}